//    override suspend fun TrimAudio(
//        context: Context,
//        uri: Uri,
//        startTime: Long,
//        endTime: Long,
//        filename: String
//    ): Flow<ResultState<String>> = flow {
//        emit(ResultState.Loading)
//        Log.d("AudioTrim", "Starting TrimAudio function")
//
//        try {
//            val clippingConfiguration = MediaItem.ClippingConfiguration.Builder()
//                .setStartPositionMs(startTime)
//                .setEndPositionMs(endTime)
//                .build()
//
//            val mediaItem = MediaItem.Builder()
//                .setUri(uri)
//                .setClippingConfiguration(clippingConfiguration)
//                .build()
//
//            val editedMediaItem = EditedMediaItem.Builder(mediaItem).build()
//
//            val outputFile = File(context.cacheDir, filename)
//            Log.d("AudioTrim", "Output file path in cache: ${outputFile.absolutePath}")
//
//            val transformer = Transformer.Builder(context)
//                .setAudioMimeType(MimeTypes.AUDIO_AAC)
//                .addListener(object : Transformer.Listener {
//                    override fun onCompleted(composition: Composition, exportResult: ExportResult) {
//                        super.onCompleted(composition, exportResult)
//                        Log.d("AudioTrim", "Transformation completed. Output at ${outputFile.absolutePath}")
//
//                        val savedUri = saveAudioFile(context, outputFile, "${filename}_${System.currentTimeMillis()}")
//                        Log.d("AudioTrim", "File saved at: $savedUri")
//
//
//                        Toast.makeText(context, "Audio Saved to Downloads üìÅ", Toast.LENGTH_SHORT).show()
//                    }
//
//                    override fun onError(
//                        composition: Composition,
//                        exportResult: ExportResult,
//                        exportException: ExportException
//                    ) {
//                        super.onError(composition, exportResult, exportException)
//                        Log.e("AudioTrim", "Error during export: ${exportException.message}", exportException)
//
//                        Toast.makeText(context, "Audio Trim Failed", Toast.LENGTH_SHORT).show()
//                    }
//                })
//                .build()
//
//            transformer.start(editedMediaItem, outputFile.absolutePath)
//
//        } catch (e: Exception) {
//            Log.e("AudioTrim", "Exception caught: ${e.message}", e)
//            emit(ResultState.Error(e.message ?: "Something went wrong"))
//        }
//    }